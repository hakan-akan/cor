#![feature(libc)]
extern crate libc;

use core::clone::Clone;
use core::mem::{zeroed,transmute};
use core::default::Default;

/* automatically generated by rust-bindgen */

pub type int8_t = libc::c_char;
pub type int16_t = libc::c_short;
pub type int32_t = libc::c_int;
pub type int64_t = libc::c_longlong;
pub type uint8_t = libc::c_uchar;
pub type uint16_t = libc::c_ushort;
pub type uint32_t = libc::c_uint;
pub type uint64_t = libc::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type __int8_t = libc::c_char;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_longlong;
pub type __uint64_t = libc::c_ulonglong;
pub type __darwin_intptr_t = libc::c_long;
pub type __darwin_natural_t = libc::c_uint;
pub type __darwin_ct_rune_t = libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self) -> *mut [libc::c_char; 128usize] {
        let raw: *mut u8 = transmute(&self._bindgen_data_);
        transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut libc::c_longlong {
        let raw: *mut u8 = transmute(&self._bindgen_data_);
        transmute(raw.offset(0))
    }
}
impl Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = libc::c_long;
pub type __darwin_size_t = libc::c_ulong;
pub type __darwin_wchar_t = libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = libc::c_int;
pub type __darwin_clock_t = libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = libc::c_long;
pub type __darwin_time_t = libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = libc::c_uint;
pub type __darwin_fsfilcnt_t = libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [libc::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: Option<unsafe extern "C" fn(arg1:
                                                                  *mut libc::c_void)
                                             -> ()>,
    pub __arg: *mut libc::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 56usize],
}
impl Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 40usize],
}
impl Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
impl Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 56usize],
}
impl Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
impl Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
impl Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 192usize],
}
impl Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 16usize],
}
impl Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: libc::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [libc::c_char; 8176usize],
}
impl Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = libc::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = libc::c_ulong;
pub type intmax_t = libc::c_long;
pub type uintmax_t = libc::c_ulong;
pub type __virtio16 = uint16_t;
pub type __virtio32 = uint32_t;
pub type __virtio64 = uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vring_desc {
    pub addr: __virtio64,
    pub len: __virtio32,
    pub flags: __virtio16,
    pub next: __virtio16,
}
impl Clone for Struct_vring_desc {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct_vring_desc {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vring_avail {
    pub flags: __virtio16,
    pub idx: __virtio16,
    pub ring: *mut __virtio16,
}
impl Clone for Struct_vring_avail {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct_vring_avail {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vring_used_elem {
    pub id: __virtio32,
    pub len: __virtio32,
}
impl Clone for Struct_vring_used_elem {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct_vring_used_elem {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vring_used {
    pub flags: __virtio16,
    pub idx: __virtio16,
    pub ring: *mut Struct_vring_used_elem,
}
impl Clone for Struct_vring_used {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct_vring_used {
    fn default() -> Self { unsafe { zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vring {
    pub num: libc::c_uint,
    pub desc: *mut Struct_vring_desc,
    pub avail: *mut Struct_vring_avail,
    pub used: *mut Struct_vring_used,
}
impl Clone for Struct_vring {
    fn clone(&self) -> Self { *self }
}
impl Default for Struct_vring {
    fn default() -> Self { unsafe { zeroed() } }
}
